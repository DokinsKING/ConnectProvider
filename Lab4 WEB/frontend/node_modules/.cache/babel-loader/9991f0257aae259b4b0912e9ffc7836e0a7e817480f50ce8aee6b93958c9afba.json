{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nexport function Hook() {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation(); // Для отслеживания изменений маршрута\n  const [services, setServices] = useState([]); // Состояние для хранения списка сервисов\n  const [applications, setApplications] = useState([]); // Состояние для хранения списка заявок\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Состояние для поискового запроса\n\n  // Функция для выполнения запроса с фильтрацией по имени (по умолчанию для сервисов)\n  const fetchData = useCallback(async (type = \"services\") => {\n    let url = `http://127.0.0.1:8000/api/${type}/?`;\n    console.log(\"Ща так: \", url);\n    if (searchQuery) {\n      url += `name=${searchQuery}&`; // Добавляем параметр поиска по имени\n    }\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n\n      // В зависимости от типа сохраняем данные в соответствующее состояние\n      if (type === \"services\") {\n        setServices(data);\n      } else if (type === \"applications\") {\n        setApplications(data);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при получении данных: \", error);\n    }\n  }, [searchQuery]); // Перезапускать только при изменении searchQuery\n\n  // Сбросить поисковый запрос при переходе на другую страницу\n  useEffect(() => {\n    setSearchQuery(\"\");\n    if (location.pathname === \"/services\") {\n      fetchData(\"services\"); // Загружаем сервисы, если маршрут /services\n    } else if (location.pathname === \"/applications\") {\n      fetchData(\"applications\"); // Загружаем заявки, если маршрут /applications\n    } // Сбрасываем поисковый запрос при изменении маршрута\n  }, [location]);\n\n  // Обработчик изменения поискового запроса\n  const handleSearchClick = e => {\n    e.preventDefault(); // Предотвращаем стандартное поведение формы (перезагрузку страницы)\n    const searchText = e.target.elements.q.value; // Получаем значение поля ввода (name=\"q\")\n    console.log(searchText); // Проверяем, что текст из поля получен\n    setSearchQuery(searchText); // Обновляем поисковый запрос\n  };\n  return {\n    navigate,\n    location,\n    services,\n    applications,\n    searchQuery,\n    handleSearchClick\n  };\n}\n_s(Hook, \"Fd0iKg1+YABjFZLjbVi0OW79XrE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Hook;\nvar _c;\n$RefreshReg$(_c, \"Hook\");","map":{"version":3,"names":["useState","useEffect","useCallback","useNavigate","useLocation","Hook","_s","navigate","location","services","setServices","applications","setApplications","searchQuery","setSearchQuery","fetchData","type","url","console","log","response","fetch","ok","Error","data","json","error","pathname","handleSearchClick","e","preventDefault","searchText","target","elements","q","value","_c","$RefreshReg$"],"sources":["D:/programming/Web Programming/ConnectProvider/frontend/src/Hook.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nexport function Hook() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation(); // Для отслеживания изменений маршрута\r\n  const [services, setServices] = useState([]); // Состояние для хранения списка сервисов\r\n  const [applications, setApplications] = useState([]); // Состояние для хранения списка заявок\r\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Состояние для поискового запроса\r\n\r\n  // Функция для выполнения запроса с фильтрацией по имени (по умолчанию для сервисов)\r\n  const fetchData = useCallback(async (type = \"services\") => {\r\n    let url = `http://127.0.0.1:8000/api/${type}/?`;\r\n\r\n    console.log(\"Ща так: \", url);\r\n\r\n    if (searchQuery) {\r\n      url += `name=${searchQuery}&`; // Добавляем параметр поиска по имени\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data = await response.json();\r\n      \r\n      // В зависимости от типа сохраняем данные в соответствующее состояние\r\n      if (type === \"services\") {\r\n        setServices(data);\r\n      } else if (type === \"applications\") {\r\n        setApplications(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Ошибка при получении данных: \", error);\r\n    }\r\n  }, [searchQuery]); // Перезапускать только при изменении searchQuery\r\n\r\n  // Сбросить поисковый запрос при переходе на другую страницу\r\n  useEffect(() => {\r\n    setSearchQuery(\"\");\r\n    if (location.pathname === \"/services\") {\r\n      fetchData(\"services\"); // Загружаем сервисы, если маршрут /services\r\n    } else if (location.pathname === \"/applications\") {\r\n      fetchData(\"applications\"); // Загружаем заявки, если маршрут /applications\r\n    } // Сбрасываем поисковый запрос при изменении маршрута\r\n  }, [location]);\r\n\r\n  // Обработчик изменения поискового запроса\r\n  const handleSearchClick = (e) => {\r\n    e.preventDefault(); // Предотвращаем стандартное поведение формы (перезагрузку страницы)\r\n    const searchText = e.target.elements.q.value; // Получаем значение поля ввода (name=\"q\")\r\n    console.log(searchText); // Проверяем, что текст из поля получен\r\n    setSearchQuery(searchText); // Обновляем поисковый запрос\r\n  };\r\n\r\n  return {\r\n    navigate,\r\n    location,\r\n    services,\r\n    applications,\r\n    searchQuery,\r\n    handleSearchClick,\r\n  };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,OAAO,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAC9B,MAAMK,QAAQ,GAAGJ,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpD;EACA,MAAMe,SAAS,GAAGb,WAAW,CAAC,OAAOc,IAAI,GAAG,UAAU,KAAK;IACzD,IAAIC,GAAG,GAAG,6BAA6BD,IAAI,IAAI;IAE/CE,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,GAAG,CAAC;IAE5B,IAAIJ,WAAW,EAAE;MACfI,GAAG,IAAI,QAAQJ,WAAW,GAAG,CAAC,CAAC;IACjC;IAEA,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,CAAC;MACjC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIT,IAAI,KAAK,UAAU,EAAE;QACvBN,WAAW,CAACc,IAAI,CAAC;MACnB,CAAC,MAAM,IAAIR,IAAI,KAAK,cAAc,EAAE;QAClCJ,eAAe,CAACY,IAAI,CAAC;MACvB;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC,EAAE,CAACb,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnB;EACAZ,SAAS,CAAC,MAAM;IACda,cAAc,CAAC,EAAE,CAAC;IAClB,IAAIN,QAAQ,CAACmB,QAAQ,KAAK,WAAW,EAAE;MACrCZ,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;IACzB,CAAC,MAAM,IAAIP,QAAQ,CAACmB,QAAQ,KAAK,eAAe,EAAE;MAChDZ,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMoB,iBAAiB,GAAIC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,MAAMC,UAAU,GAAGF,CAAC,CAACG,MAAM,CAACC,QAAQ,CAACC,CAAC,CAACC,KAAK,CAAC,CAAC;IAC9CjB,OAAO,CAACC,GAAG,CAACY,UAAU,CAAC,CAAC,CAAC;IACzBjB,cAAc,CAACiB,UAAU,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,OAAO;IACLxB,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRE,YAAY;IACZE,WAAW;IACXe;EACF,CAAC;AACH;AAACtB,EAAA,CA7DeD,IAAI;EAAA,QACDF,WAAW,EACXC,WAAW;AAAA;AAAAgC,EAAA,GAFd/B,IAAI;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}