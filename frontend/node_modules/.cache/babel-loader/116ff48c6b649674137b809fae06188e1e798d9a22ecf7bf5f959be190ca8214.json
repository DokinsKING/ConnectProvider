{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\Web Programming\\\\ConnectProvider\\\\frontend\\\\src\\\\components\\\\ServiceList\\\\ServiceList.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport styles from \"./ServiceList.module.css\";\nimport { ServiceCard } from './../ServiceCard/ServiceCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ServiceList() {\n  _s();\n  const [services, setServices] = useState([]); // Состояние для хранения списка сервисов\n\n  useEffect(() => {\n    // Асинхронный запрос к API для получения списка сервисов\n    const fetchServices = async () => {\n      try {\n        const response = await fetch(\"https://your-api-url.com/services\"); // Замените на ваш реальный URL\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setServices(data); // Обновляем состояние с полученными сервисами\n      } catch (error) {\n        console.error(\"Ошибка при получении данных: \", error);\n      }\n    };\n    fetchServices();\n  }, []); // Эффект с пустым массивом, чтобы запросить данные только при монтировании компонента\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.title,\n      children: \"\\u0423\\u0441\\u043B\\u0443\\u0433\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.search_field,\n      action: \"/search\",\n      method: \"get\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"q\",\n        \"aria-label\": \"\\u041F\\u043E\\u0438\\u0441\\u043A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u041F\\u043E\\u0438\\u0441\\u043A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.serviceList,\n      children: services.map(service => /*#__PURE__*/_jsxDEV(ServiceCard, {\n        name: service.name,\n        description: service.description,\n        image: service.image\n      }, service.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(ServiceList, \"6zIv7VYIWrxuvR7GDZce08FfVgw=\");\n_c = ServiceList;\nvar _c;\n$RefreshReg$(_c, \"ServiceList\");","map":{"version":3,"names":["useState","useEffect","styles","ServiceCard","jsxDEV","_jsxDEV","ServiceList","_s","services","setServices","fetchServices","response","fetch","ok","Error","data","json","error","console","className","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","search_field","action","method","type","name","serviceList","map","service","description","image","id","_c","$RefreshReg$"],"sources":["D:/programming/Web Programming/ConnectProvider/frontend/src/components/ServiceList/ServiceList.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport styles from \"./ServiceList.module.css\";\r\nimport { ServiceCard } from './../ServiceCard/ServiceCard';\r\n\r\nexport function ServiceList() {\r\n    const [services, setServices] = useState([]); // Состояние для хранения списка сервисов\r\n\r\n    useEffect(() => {\r\n        // Асинхронный запрос к API для получения списка сервисов\r\n        const fetchServices = async () => {\r\n            try {\r\n                const response = await fetch(\"https://your-api-url.com/services\"); // Замените на ваш реальный URL\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                const data = await response.json();\r\n                setServices(data); // Обновляем состояние с полученными сервисами\r\n            } catch (error) {\r\n                console.error(\"Ошибка при получении данных: \", error);\r\n            }\r\n        };\r\n\r\n        fetchServices();\r\n    }, []); // Эффект с пустым массивом, чтобы запросить данные только при монтировании компонента\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2 className={styles.title}>Услуги</h2>\r\n            <form className={styles.search_field} action=\"/search\" method=\"get\">\r\n                <input type=\"text\" name=\"q\" aria-label=\"Поиск\" />\r\n                <button type=\"submit\">Поиск</button>\r\n            </form>\r\n\r\n            {/* Перебираем все сервисы и для каждого рендерим компонент ServiceCard */}\r\n            <div className={styles.serviceList}>\r\n                {services.map(service => (\r\n                    <ServiceCard \r\n                        key={service.id} \r\n                        name={service.name} \r\n                        description={service.description} \r\n                        image={service.image} \r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,SAASC,WAAW,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,OAAO,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9CC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;QACnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,WAAW,CAACM,IAAI,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD;IACJ,CAAC;IAEDP,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIL,OAAA;IAAKc,SAAS,EAAEjB,MAAM,CAACkB,SAAU;IAAAC,QAAA,gBAC7BhB,OAAA;MAAIc,SAAS,EAAEjB,MAAM,CAACoB,KAAM;MAAAD,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxCrB,OAAA;MAAMc,SAAS,EAAEjB,MAAM,CAACyB,YAAa;MAACC,MAAM,EAAC,SAAS;MAACC,MAAM,EAAC,KAAK;MAAAR,QAAA,gBAC/DhB,OAAA;QAAOyB,IAAI,EAAC,MAAM;QAACC,IAAI,EAAC,GAAG;QAAC,cAAW;MAAO;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjDrB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAAAT,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eAGPrB,OAAA;MAAKc,SAAS,EAAEjB,MAAM,CAAC8B,WAAY;MAAAX,QAAA,EAC9Bb,QAAQ,CAACyB,GAAG,CAACC,OAAO,iBACjB7B,OAAA,CAACF,WAAW;QAER4B,IAAI,EAAEG,OAAO,CAACH,IAAK;QACnBI,WAAW,EAAED,OAAO,CAACC,WAAY;QACjCC,KAAK,EAAEF,OAAO,CAACE;MAAM,GAHhBF,OAAO,CAACG,EAAE;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIlB,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACnB,EAAA,CA1CeD,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}