{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nexport function Hook() {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation(); // Для отслеживания изменений маршрута\n  const [services, setServices] = useState([]); // Состояние для хранения списка сервисов\n  const [applications, setApplications] = useState([]); // Состояние для хранения списка заявок\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [type, setType] = useState(\"\"); // Состояние для типа запроса (сервисы или заявки)\n\n  // Функция для выполнения запроса с фильтрацией по имени (по умолчанию для сервисов)\n  const fetchData = useCallback(async () => {\n    setIsLoading(true);\n    const type = location.pathname.split('/')[1] + \"/\"; // Извлекаем тип из location.pathname\n\n    let url = `http://127.0.0.1:8000/api/${type}`;\n    if (searchQuery !== \"\") {\n      url += `?name=${searchQuery}`; // Добавляем поисковый запрос, если он есть\n    }\n    console.log(url);\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      if (type === \"services/\") {\n        setServices(data);\n      } else if (type === \"applications/\") {\n        setApplications(data);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при получении данных:\", error);\n    }\n  }, [searchQuery, location.pathname]); // Теперь зависимость от location.pathname\n\n  // Обработчик изменения поискового запроса\n  const handleSearchClick = e => {\n    e.preventDefault(); // Предотвращаем стандартное поведение формы (перезагрузку страницы)\n    const searchText = e.target.elements.q.value; // Получаем значение поля ввода (name=\"q\")\n    console.log(searchText);\n    setSearchQuery(searchText); // Обновляем поисковый запрос\n  };\n  const createApplication = async cartItems => {\n    try {\n      // 1. Создаем заявку\n      const response = await fetch(`http://127.0.0.1:8000/api/applications/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status: 'draft',\n          // Статус заявки \"Черновик\"\n          created_at: new Date().toISOString(),\n          creator: 1\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log('Заявка успешно создана', data);\n        const applicationId = data.id; // Получаем ID созданной заявки\n\n        // 2. После создания заявки, для каждой услуги отправляем отдельный запрос в application-services\n        for (let item of cartItems) {\n          const serviceResponse = await fetch(`http://127.0.0.1:8000/api/application-services/`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              application: applicationId,\n              // ID созданной заявки\n              service: item.id // ID услуги из корзины\n            })\n          });\n          const serviceData = await serviceResponse.json();\n          if (serviceResponse.ok) {\n            console.log('Запись в application-services успешно создана', serviceData);\n          } else {\n            console.error('Ошибка при создании записи в application-services', serviceData);\n          }\n        }\n        return data;\n      } else {\n        console.error('Ошибка при создании заявки', data);\n        return null;\n      }\n    } catch (error) {\n      console.error('Ошибка при отправке данных:', error);\n    }\n  };\n  return {\n    navigate,\n    location,\n    services,\n    applications,\n    searchQuery,\n    handleSearchClick,\n    createApplication\n  };\n}\n_s(Hook, \"9DwRvXWYRhl8b51/TQkrkzgG/oI=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Hook;\nvar _c;\n$RefreshReg$(_c, \"Hook\");","map":{"version":3,"names":["useState","useEffect","useCallback","useNavigate","useLocation","Hook","_s","navigate","location","services","setServices","applications","setApplications","searchQuery","setSearchQuery","type","setType","fetchData","setIsLoading","pathname","split","url","console","log","response","fetch","ok","Error","data","json","error","handleSearchClick","e","preventDefault","searchText","target","elements","q","value","createApplication","cartItems","method","headers","body","JSON","stringify","status","created_at","Date","toISOString","creator","applicationId","id","item","serviceResponse","application","service","serviceData","_c","$RefreshReg$"],"sources":["D:/programming/Web Programming/ConnectProvider/frontend/src/Hook.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nexport function Hook() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation(); // Для отслеживания изменений маршрута\r\n  const [services, setServices] = useState([]); // Состояние для хранения списка сервисов\r\n  const [applications, setApplications] = useState([]); // Состояние для хранения списка заявок\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [type, setType] = useState(\"\"); // Состояние для типа запроса (сервисы или заявки)\r\n\r\n  // Функция для выполнения запроса с фильтрацией по имени (по умолчанию для сервисов)\r\n  const fetchData = useCallback(async () => {\r\n    setIsLoading(true);\r\n\r\n    const type = location.pathname.split('/')[1] + \"/\"; // Извлекаем тип из location.pathname\r\n\r\n    let url = `http://127.0.0.1:8000/api/${type}`;\r\n\r\n    if (searchQuery !== \"\") {\r\n      url += `?name=${searchQuery}`; // Добавляем поисковый запрос, если он есть\r\n    }\r\n\r\n    console.log(url);\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      if (type === \"services/\") {\r\n        setServices(data);\r\n      } else if (type === \"applications/\") {\r\n        setApplications(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Ошибка при получении данных:\", error);\r\n    }\r\n  }, [searchQuery, location.pathname]); // Теперь зависимость от location.pathname\r\n\r\n\r\n\r\n  // Обработчик изменения поискового запроса\r\n  const handleSearchClick = (e) => {\r\n    e.preventDefault(); // Предотвращаем стандартное поведение формы (перезагрузку страницы)\r\n    const searchText = e.target.elements.q.value; // Получаем значение поля ввода (name=\"q\")\r\n    console.log(searchText);\r\n    setSearchQuery(searchText); // Обновляем поисковый запрос\r\n  };\r\n\r\n  const createApplication = async (cartItems) => {\r\n    try {\r\n      // 1. Создаем заявку\r\n      const response = await fetch(`http://127.0.0.1:8000/api/applications/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          status: 'draft', // Статус заявки \"Черновик\"\r\n          created_at: new Date().toISOString(),\r\n          creator: 1\r\n        }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n  \r\n      if (response.ok) {\r\n        console.log('Заявка успешно создана', data);\r\n        const applicationId = data.id; // Получаем ID созданной заявки\r\n  \r\n        // 2. После создания заявки, для каждой услуги отправляем отдельный запрос в application-services\r\n        for (let item of cartItems) {\r\n          const serviceResponse = await fetch(`http://127.0.0.1:8000/api/application-services/`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              application: applicationId,  // ID созданной заявки\r\n              service: item.id,  // ID услуги из корзины\r\n            }),\r\n          });\r\n  \r\n          const serviceData = await serviceResponse.json();\r\n  \r\n          if (serviceResponse.ok) {\r\n            console.log('Запись в application-services успешно создана', serviceData);\r\n          } else {\r\n            console.error('Ошибка при создании записи в application-services', serviceData);\r\n          }\r\n        }\r\n  \r\n        return data;\r\n      } else {\r\n        console.error('Ошибка при создании заявки', data);\r\n        return null;\r\n      }\r\n  \r\n    } catch (error) {\r\n      console.error('Ошибка при отправке данных:', error);\r\n    }\r\n  };\r\n  \r\n\r\n  return {\r\n    navigate,\r\n    location,\r\n    services,\r\n    applications,\r\n    searchQuery,\r\n    handleSearchClick,\r\n    createApplication,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}